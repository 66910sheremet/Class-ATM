Условие:
Реализовать класс "Банкомат"

Есть валюты:
currencies = [RUB, USD, EUR]

Монеты/купюры каждой валюты бывают ТОЛЬКО такого номинала:
nominals = [1, 5, 10, 50, 100, 500, 1000, 5000]

Нужно разработать класс "Банкомат" со следующими возможностями:

Принять в банкомат несколько монет/купюр:
put(currency, nominal, count) -> None

Выдать из банкомата определенную сумму денег в определенной валюте:
get(currency, amount) -> [(nominal, count), ...] | raise UnavailableError
Ответом должен быть список, каким образом банкомат выдаст нужную сумму, какими монетами/купюрами, в каком количестве.

Банкомат обычный, сам деньги не печатает, может выдавать только то, что в него положили.
Если выдать требуемую сумму нет возможности - бросаем исключение UnavailableError.

Декоратор, ограничивающий скорость выполнения функции (не чаще 1 раза в X сек)

Примечания:
1. Минимальной задачей было обеспечить необходимую функциональность - программа должна работать!
2. Несмотря на то что программа работоспособна, есть много ошибок по коду и есть что доделывать и улучшать.
3. В выдаче функций оставлены некоторые принты для наглядности.
4. Декораторы до конца не продуманы, на рекурсивную функцию не повешены.

